# MIT License
# 
# Copyright (c) 2019 Thiago Alves
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
---
- name: "Return {{ norm_item.key }} unchanged"
  set_fact:
    norm_vars: "{{ norm_vars | combine({norm_item.key: norm_item.value}) }}"
  when: norm_item.value is string

- name: Read content from file
  block:
    - name: "Return {{ norm_item.key }} content from control machine"
      set_fact:
        _item_value: "{{ lookup('file', norm_item.value.name) }}"
      when: norm_item.value.source == "local"

    - name: "Return {{ norm_item.key }} content from host machine"
      shell: "cat {{ _tool_temp_root.path + '/' + norm_item.value.name }}"
      register: _item_value
      when: norm_item.value.source == "install"
      changed_when: false

    - name: "Normalize {{ norm_item.key }} content from host machine"
      set_fact:
        _item_value: "{{ _item_value.stdout }}"
      when: norm_item.value.source == "install"

    - name: "Return {{ norm_item.key }} content from file"
      set_fact:
        norm_vars: "{{ norm_vars | combine({norm_item.key: _item_value}) }}"
  when: norm_item.value is not string
